{"ast":null,"code":"import _toConsumableArray from \"/home/codeyourfuture/Documents/GitHub/cyf-people-list-exercise/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/codeyourfuture/Documents/GitHub/cyf-people-list-exercise/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/codeyourfuture/Documents/GitHub/cyf-people-list-exercise/src/PeopleList.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\n/*\n  We are going to finish the code below\n  so that we can add new people to our\n  list.\n\n  1. Remove the people prop and\n  use useState instead\n  with an array of names.\n\n  2. Use useState to store the \n  value of the input when it changes\n  (this will be the new person's name).\n\n  3. When the button is clicked, the\n  new person's name should be added to\n  array of names in state.\n\n  4. Stretch goal: Add a another button\n  below that removes the last person from the\n  list when it is clicked.\n\n  5. Stretch goal 2: Add an input next to\n  the remove name button and change how it\n  works so that it removes the person with\n  the name matching the input. (Hint: you\n  can use the .filter method for this).\n*/\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar PeopleList = function PeopleList() {\n  _s();\n\n  var _useState = useState([\"Dave\", \"Alice\", \"Bob\"]),\n      _useState2 = _slicedToArray(_useState, 2),\n      people = _useState2[0],\n      setPeople = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      newName = _useState4[0],\n      setNewName = _useState4[1]; //  const [filter, setFilter] = useState(\"\");\n\n\n  function addNewPerson() {\n    var newPeople = [].concat(_toConsumableArray(people), [newName]);\n    setPeople(newPeople);\n  }\n\n  var removePerson = function removePerson() {\n    var person = pe.filter(function (newName, newNameIndex) {\n      return index !== newNameIndex;\n    });\n    setNewName(_toConsumableArray(person));\n  }; // function removePerson(index){\n  //   const person = newName.filter((people)=>people.index !== index);\n  //   setNewName(person);\n  // }\n  // function removePerson(index){\n  //   const person = [...people, newName];\n  //   person.splice(index, 1);\n  //   setPeople(person);\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"PeopleList\",\n      children: people.map(function (person, index) {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: person\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Add a person\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Name:\", \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: function onChange(event) {\n            return setNewName(event.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addNewPerson,\n        children: \"Add person\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: removePerson,\n        children: \"Remove person\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 10\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(PeopleList, \"BHfJk9Z2ei86r3Po145tJ4hfyMg=\");\n\n_c = PeopleList;\nexport default PeopleList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PeopleList\");","map":{"version":3,"sources":["/home/codeyourfuture/Documents/GitHub/cyf-people-list-exercise/src/PeopleList.js"],"names":["React","useState","PeopleList","people","setPeople","newName","setNewName","addNewPerson","newPeople","removePerson","person","pe","filter","newNameIndex","index","map","event","target","value"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAAA;;AACvB,kBAA4BD,QAAQ,CAAC,CAAC,MAAD,EAAS,OAAT,EAAkB,KAAlB,CAAD,CAApC;AAAA;AAAA,MAAOE,MAAP;AAAA,MAAeC,SAAf;;AACA,mBAA8BH,QAAQ,CAAC,EAAD,CAAtC;AAAA;AAAA,MAAOI,OAAP;AAAA,MAAgBC,UAAhB,iBAFuB,CAGvB;;;AAEA,WAASC,YAAT,GAAwB;AACtB,QAAMC,SAAS,gCAAOL,MAAP,IAAeE,OAAf,EAAf;AACAD,IAAAA,SAAS,CAACI,SAAD,CAAT;AACD;;AACD,MAAMC,YAAY,GAAE,SAAdA,YAAc,GAAI;AACtB,QAAMC,MAAM,GAAGC,EAAE,CAACC,MAAH,CAAU,UAACP,OAAD,EAAUQ,YAAV;AAAA,aAAyBC,KAAK,KAAID,YAAlC;AAAA,KAAV,CAAf;AACAP,IAAAA,UAAU,oBAAKI,MAAL,EAAV;AACD,GAHD,CATuB,CAevB;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;;;AAEA,sBACE;AAAA,4BACE;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA,gBACGP,MAAM,CAACY,GAAP,CAAW,UAACL,MAAD,EAASI,KAAT;AAAA,4BACV;AAAA,oBAAiBJ;AAAjB,WAASI,KAAT;AAAA;AAAA;AAAA;AAAA,iBADU;AAAA,OAAX;AADH;AAAA;AAAA;AAAA;AAAA,aADF,eAME;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAEE;AAAA,4BACQ,GADR,eAEE;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,QAAQ,EAAE,kBAACE,KAAD;AAAA,mBAAWV,UAAU,CAACU,KAAK,CAACC,MAAN,CAAaC,KAAd,CAArB;AAAA;AAFZ;AAAA;AAAA;AAAA;AAAA,iBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF,eAYE;AAAQ,QAAA,OAAO,EAAEX,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAZF,eAaG;AAAQ,QAAA,OAAO,EAAEE,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAbH;AAAA;AAAA;AAAA;AAAA;AAAA,aANF;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAwBD,CApDD;;GAAMP,U;;KAAAA,U;AAsDN,eAAeA,UAAf","sourcesContent":["/*\n  We are going to finish the code below\n  so that we can add new people to our\n  list.\n\n  1. Remove the people prop and\n  use useState instead\n  with an array of names.\n\n  2. Use useState to store the \n  value of the input when it changes\n  (this will be the new person's name).\n\n  3. When the button is clicked, the\n  new person's name should be added to\n  array of names in state.\n\n  4. Stretch goal: Add a another button\n  below that removes the last person from the\n  list when it is clicked.\n\n  5. Stretch goal 2: Add an input next to\n  the remove name button and change how it\n  works so that it removes the person with\n  the name matching the input. (Hint: you\n  can use the .filter method for this).\n*/\n\nimport React, { useState } from \"react\";\n\nconst PeopleList = () => {\n  const [people, setPeople] = useState([\"Dave\", \"Alice\", \"Bob\"]);\n  const [newName, setNewName] = useState(\"\");\n  //  const [filter, setFilter] = useState(\"\");\n\n  function addNewPerson() {\n    const newPeople = [...people, newName];\n    setPeople(newPeople);\n  }\n  const removePerson =()=>{\n    const person = pe.filter((newName, newNameIndex)=>index !==newNameIndex)\n    setNewName([...person]);\n  }\n\n\n  // function removePerson(index){\n  //   const person = newName.filter((people)=>people.index !== index);\n  //   setNewName(person);\n\n  // }\n\n  \n  // function removePerson(index){\n  //   const person = [...people, newName];\n  //   person.splice(index, 1);\n  //   setPeople(person);\n  // }\n\n  return (\n    <div>\n      <ul className=\"PeopleList\">\n        {people.map((person, index) => (\n          <li key={index}>{person}</li>\n        ))}\n      </ul>\n      <div>\n        <h3>Add a person</h3>\n        <label>\n          Name:{\" \"}\n          <input\n            type=\"text\"\n            onChange={(event) => setNewName(event.target.value)}\n          />\n          {/* <input type=\"text\" \n          value={filter}\n          onChange={(event) =>setFilter(event.target.value)}/> */}\n        </label>\n        <button onClick={addNewPerson}>Add person</button>\n         <button onClick={removePerson}>Remove person</button>\n      </div>\n    </div>\n  );\n};\n\nexport default PeopleList;\n"]},"metadata":{},"sourceType":"module"}